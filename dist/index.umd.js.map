{"version":3,"file":"index.umd.js","sources":["../src/components/Toggle/Toggle.tsx"],"sourcesContent":["import React from 'react';\nimport { ToggleProps } from './types';\n\nconst Toggle: React.FC<ToggleProps> = ({\n  isChecked,\n  defaultIsChecked = false,\n  onToggleChange,\n  onToggleFocus,\n  onToggleBlur,\n  inputName,\n  inputValue,\n  inputId,\n  customIcons,\n  ariaLabelledBy,\n  ariaLabel,\n  isDisabled,\n  containerClassName,\n  toggleTheme = 'ios',\n  leftLabel,\n  rightLabel,\n}) => {\n  const isControlled = isChecked !== undefined;\n  const [internalChecked, setInternalChecked] = React.useState(defaultIsChecked);\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (isDisabled) return;\n    if (!isControlled) {\n      setInternalChecked(e.target.checked);\n    }\n    onToggleChange?.(e);\n  };\n\n  const isToggleChecked = isControlled ? isChecked : internalChecked;\n\n  return (\n    <div className={`react-toggly-container ${containerClassName || ''}`}>\n      {/* Left label (text or icon) */}\n      {leftLabel && <span className=\"react-toggly__left-label\">{leftLabel}</span>}\n\n      {/* Toggle switch */}\n      <label\n        className={`react-toggly__wrapper react-toggly__wrapper--${toggleTheme} ${\n          isDisabled ? 'react-toggly__wrapper--disabled' : ''\n        }`}\n      >\n        <input\n          type=\"checkbox\"\n          className=\"react-toggly__input\"\n          checked={isToggleChecked}\n          onChange={handleChange}\n          onFocus={onToggleFocus}\n          onBlur={onToggleBlur}\n          name={inputName}\n          value={inputValue}\n          id={inputId}\n          aria-labelledby={ariaLabelledBy}\n          aria-label={ariaLabel}\n          disabled={isDisabled}\n        />\n        <span className=\"react-toggly__slider\">\n          {customIcons?.checked && isToggleChecked && (\n            <div className=\"react-toggly__icon-wrapper react-toggly__checked-icon\">\n              {customIcons.checked}\n            </div>\n          )}\n          {customIcons?.unchecked && !isToggleChecked && (\n            <div className=\"react-toggly__icon-wrapper react-toggly__unchecked-icon\">\n              {customIcons.unchecked}\n            </div>\n          )}\n        </span>\n      </label>\n\n      {/* Right label (text or icon) */}\n      {rightLabel && <span className=\"react-toggly__right-label\">{rightLabel}</span>}\n    </div>\n  );\n};\n\nexport default Toggle;"],"names":["isChecked","defaultIsChecked","onToggleChange","onToggleFocus","onToggleBlur","inputName","inputValue","inputId","customIcons","ariaLabelledBy","ariaLabel","isDisabled","containerClassName","toggleTheme","leftLabel","rightLabel","isControlled","undefined","internalChecked","setInternalChecked","React","useState","isToggleChecked","_jsxs","className","children","_jsx","jsxs","type","checked","onChange","e","target","onFocus","onBlur","name","value","id","disabled","jsx","unchecked"],"mappings":"yVAGsC,EACpCA,YACAC,oBAAmB,EACnBC,iBACAC,gBACAC,eACAC,YACAC,aACAC,UACAC,cACAC,iBACAC,YACAC,aACAC,qBACAC,cAAc,MACdC,YACAC,iBAEA,MAAMC,OAA6BC,IAAdjB,GACdkB,EAAiBC,GAAsBC,EAAMC,SAASpB,GAUvDqB,EAAkBN,EAAehB,EAAYkB,EAEnD,OACEK,OAAA,MAAA,CAAKC,UAAW,0BAA0BZ,GAAsB,KAAIa,SAAA,CAEjEX,GAAaY,EAAAA,YAAMF,UAAU,2BAA0BC,SAAEX,IAG1DS,EAAAI,KAAA,QAAA,CACEH,UAAW,gDAAgDX,KACzDF,EAAa,kCAAoC,KACjDc,SAAA,CAEFC,MACE,QAAA,CAAAE,KAAK,WACLJ,UAAU,sBACVK,QAASP,EACTQ,SAzBcC,IAChBpB,IACCK,GACHG,EAAmBY,EAAEC,OAAOH,SAE9B3B,IAAiB6B,GAAE,EAqBbE,QAAS9B,EACT+B,OAAQ9B,EACR+B,KAAM9B,EACN+B,MAAO9B,EACP+B,GAAI9B,EACa,kBAAAE,EACL,aAAAC,EACZ4B,SAAU3B,IAEZY,eAAMC,UAAU,uBAAsBC,SAAA,CACnCjB,GAAaqB,SAAWP,GACvBI,EAAKa,IAAA,MAAA,CAAAf,UAAU,wDACZC,SAAAjB,EAAYqB,UAGhBrB,GAAagC,YAAclB,GAC1BI,EAAAA,IAAA,MAAA,CAAKF,UAAU,0DAAyDC,SACrEjB,EAAYgC,kBAOpBzB,GAAcW,EAAAA,IAAM,OAAA,CAAAF,UAAU,4BAA6BC,SAAAV,MACxD"}